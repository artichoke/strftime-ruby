var searchIndex = new Map(JSON.parse('[\
["strftime",{"doc":"This crate provides a Ruby 3.1.2 compatible <code>strftime</code> …","t":"SGPPPPPPKPNNCCMMMCNNNNNNMNCMMMMMNCMMNNNNMMHHHHH","n":["ASCTIME_FORMAT_STRING","Error","FmtError","FormattedStringTooLarge","InvalidFormatString","InvalidTime","IoError","OutOfMemory","Time","WriteZero","borrow","borrow_mut","buffered","bytes","day","day_of_week","day_of_year","fmt","fmt","fmt","from","from","from","from","hour","into","io","is_utc","minute","month","nanoseconds","second","source","string","time_zone","to_int","to_string","try_from","try_into","type_id","utc_offset","year","strftime","strftime","strftime","strftime","strftime"],"q":[[0,"strftime"],[42,"strftime::buffered"],[43,"strftime::bytes"],[44,"strftime::fmt"],[45,"strftime::io"],[46,"strftime::string"],[47,"core::fmt"],[48,"core::fmt"],[49,"core::fmt"],[50,"core::error"],[51,"core::option"],[52,"alloc::string"],[53,"core::result"],[54,"core::any"],[55,"alloc::vec"],[56,"core::fmt"]],"d":["Format string used by Ruby <code>Time#asctime</code> method.","Error type returned by the <code>strftime</code> functions.","Formatting error, corresponding to <code>core::fmt::Error</code>.","Formatted string is too large and could cause an …","Provided format string is ended by an unterminated format …","Provided time implementation returns invalid values.","An I/O error has occurred in <code>io::strftime</code>.","An allocation failure has occurred in either …","Common methods needed for formatting <em>time</em>.","Provided buffer for the <code>buffered::strftime</code> function is too …","","","Provides a <code>strftime</code> implementation using a format string …","Provides a <code>strftime</code> implementation using a format string …","Returns the day of the month in <code>1..=31</code> for <em>time</em>.","Returns an integer representing the day of the week in …","Returns an integer representing the day of the year in …","Provides a <code>strftime</code> implementation using a UTF-8 format …","","","Returns the argument unchanged.","","","","Returns the hour of the day in <code>0..=23</code> for <em>time</em>.","Calls <code>U::from(self)</code>.","Provides a <code>strftime</code> implementation using a format string …","Returns true if the time zone is UTC.","Returns the minute of the hour in <code>0..=59</code> for <em>time</em>.","Returns the month of the year in <code>1..=12</code> for <em>time</em>.","Returns the number of nanoseconds in <code>0..=999_999_999</code> for …","Returns the second of the minute in <code>0..=60</code> for <em>time</em>.","","Provides a <code>strftime</code> implementation using a UTF-8 format …","Returns the name of the time zone as a string.","Returns the number of seconds as a signed integer since …","","","","","Returns the offset in seconds between the timezone of <em>time</em> …","Returns the year for <em>time</em> (including the century).","Format a <em>time</em> implementation with the specified format …","Format a <em>time</em> implementation with the specified format …","Format a <em>time</em> implementation with the specified UTF-8 …","Format a <em>time</em> implementation with the specified format …","Format a <em>time</em> implementation with the specified UTF-8 …"],"i":[0,0,4,4,4,4,4,4,0,4,4,4,0,0,1,1,1,0,4,4,4,4,4,4,1,4,0,1,1,1,1,1,4,0,1,1,4,4,4,4,1,1,0,0,0,0,0],"f":"``````````{ce{}{}}0``{bd}0{bf}`{{hj}l}0{cc{}}{nh}{A`h}{Abh}67`{bAd}77{bAf}8{h{{Aj{Ah}}}}`{bAl}{bAn}{cB`{}}{c{{Bb{e}}}{}{}}0{cBd{}}{bBf}0{{c{Bh{d}}{Bh{d}}}{{Bb{{Bh{d}}h}}}b}{{c{Bh{d}}}{{Bb{{Bj{d}}h}}}b}{{cAlBl}{{Bb{Bnh}}}b}{{c{Bh{d}}C`}{{Bb{Bnh}}}b}{{cAl}{{Bb{B`h}}}b}","c":[],"p":[[10,"Time",0],[1,"u8"],[1,"u16"],[6,"Error",0],[5,"Formatter",47],[8,"Result",47],[5,"Error",48],[5,"Error",47],[5,"TryReserveError",49],[1,"bool"],[1,"u32"],[10,"Error",50],[6,"Option",51],[1,"str"],[1,"i64"],[5,"String",52],[6,"Result",53],[5,"TypeId",54],[1,"i32"],[1,"slice"],[5,"Vec",55],[10,"Write",47],[1,"unit"],[10,"Write",56]],"b":[[18,"impl-Display-for-Error"],[19,"impl-Debug-for-Error"],[21,"impl-From%3CError%3E-for-Error"],[22,"impl-From%3CError%3E-for-Error"],[23,"impl-From%3CTryReserveError%3E-for-Error"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
